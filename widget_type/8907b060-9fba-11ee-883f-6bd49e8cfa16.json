{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "half_custom_pie_chart",
    "name" : "counts custom PIE chart",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7,
      "sizeY" : 5.5,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/echarts/5.4.3/echarts.min.js"
      } ],
      "templateHtml" : "<div id=\"echarts-half-pie-container\" style=\"height:inherit; width:inherit\"></div>",
      "templateCss" : "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
      "controllerScript" : "var chartDom;\r\nvar myChart;\r\nvar option;\r\nlet colors = ['#7870BE', '#e0f2f1'];\r\nself.onInit = function() {\r\n    console.log(self.ctx.dashboardWidget);\r\n    chartDom = (self.ctx.$container.find('#echarts-half-pie-container') && self.ctx.$container.find('#echarts-half-pie-container')[0] ) || document.getElementById('echarts-half-pie-container');\r\n    myChart = echarts.init(chartDom);\r\n\toption = {\r\n      tooltip: {\r\n        trigger: 'item'\r\n      },\r\n  series: [\r\n    {\r\n      name: '',\r\n      type: 'pie',\r\n      radius: ['45%', '60%'],\r\n      avoidLabelOverlap: false,\r\n      label: {\r\n        show: false,\r\n        position: 'center'\r\n      },\r\n      color: colors,\r\n      silent:true,\r\n      emphasis: {\r\n        label: {\r\n          show: true,\r\n          fontSize: 40,\r\n          fontWeight: 'bold'\r\n        }\r\n      },\r\n      startAngle:180,\r\n      labelLine: {\r\n        show: false\r\n      },\r\n      data: []\r\n    }\r\n  ]\r\n};\r\n  for (var i = 0; i < self.ctx.datasources.length; i++) {\r\n        var datasource = self.ctx.datasources[i];\r\n        for (var d = 0; d < datasource.dataKeys.length; d++) {\r\n            var dataKey = datasource.dataKeys[d];\r\n            var units = dataKey.units && dataKey.units.length ? dataKey.units : self.ctx.units;\r\n            units = units ? (' (' + units + ')') : '';\r\n            var dataset = {\r\n                value: 0,\r\n                name:  dataKey.label + units,\r\n            }\r\n            option.series[0].data.push(dataset);\r\n        }\r\n    }\r\n    \r\n        setTimeout(function() {\r\n            myChart.setOption(option);\r\n        }, 100);\r\n}\r\n\r\nself.onDataUpdated = function() {\r\n    let halfValue = 0;\r\n     option.series[0].data=[];\r\n    for (var i = 0; i < self.ctx.data.length; i++) {\r\n        var cellData = self.ctx.data[i];\r\n        if (cellData.data.length > 0) {\r\n            var decimals;\r\n            if (typeof cellData.dataKey.decimals !== 'undefined' \r\n                && cellData.dataKey.decimals !== null ) {\r\n                decimals = cellData.dataKey.decimals; \r\n            } else {\r\n                decimals = self.ctx.decimals;\r\n            }\r\n            var tvPair = cellData.data[cellData.data.length - 1];\r\n            var value = self.ctx.utils.formatValue(tvPair[1], decimals);\r\n            option.series[0].data.push({ name: cellData.dataKey.label, value }); \r\n        }\r\n    }\r\n    myChart.setOption(option);\r\n}\r\n\r\nself.onLatestDataUpdated = function() {\r\n    // If you need to handle latest data updates, add your logic here\r\n}\r\n\r\nself.onResize = function() {\r\n    myChart.resize();\r\n    // If you need to handle resize events, add your logic here\r\n}\r\n\r\nself.onEditModeChanged = function() {\r\n    // If you need to handle edit mode changes, add your logic here\r\n}\r\n\r\nself.onDestroy = function() {\r\n    // If you need to handle widget destruction, add your logic here\r\n}\r\n\r\nself.typeParameters = function() {\r\n    return {\r\n        maxDatasources: 2,\r\n    };\r\n};",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "settingsDirective" : "",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.44000545813509984,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"aggregationType\":null,\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}],\"alarmFilterConfig\":{\"statusList\":[\"ACTIVE\"]}}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Attributes card\",\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":false,\"enableDataExport\":false,\"widgetStyle\":{},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"pageSize\":1024,\"noDataDisplayMessage\":\"\"}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "8907b060-9fba-11ee-883f-6bd49e8cfa16"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}